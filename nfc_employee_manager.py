#!/usr/bin/env python3
"""
Script pour √©crire les donn√©es employ√© sur les tags NFC
Utilise la biblioth√®que nfcpy pour communiquer avec le lecteur NFC
"""

import nfc
import ndef
import json
import uuid
from datetime import datetime

class NFCEmployeeWriter:
    def __init__(self):
        self.clf = None
        
    def connect_reader(self):
        """Connecter le lecteur NFC"""
        try:
            self.clf = nfc.ContactlessFrontend('usb')
            print("‚úÖ Lecteur NFC connect√© avec succ√®s")
            return True
        except Exception as e:
            print(f"‚ùå Erreur de connexion au lecteur NFC: {e}")
            return False
    
    def write_employee_data(self, employee_data):
        """√âcrire les donn√©es employ√© sur un tag NFC"""
        if not self.clf:
            print("‚ùå Lecteur NFC non connect√©")
            return False
            
        print(f"Placez le tag NFC pour l'employ√©: {employee_data['name']}")
        print("Appuyez sur Ctrl+C pour annuler...")
        
        try:
            tag = self.clf.connect(rdwr={'on-connect': lambda tag: self._write_data(tag, employee_data)})
            return True
        except KeyboardInterrupt:
            print("\n‚ùå Op√©ration annul√©e par l'utilisateur")
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©criture: {e}")
            return False
    
    def _write_data(self, tag, employee_data):
        """√âcrire les donn√©es sur le tag"""
        try:
            # Cr√©er l'ID unique pour le tag
            tag_id = str(uuid.uuid4())
            
            # Pr√©parer les donn√©es √† √©crire
            nfc_data = {
                'type': 'timetracker24_employee',
                'tagId': tag_id,
                'employeeId': employee_data['id'],
                'name': employee_data['name'],
                'position': employee_data.get('position', ''),
                'created': datetime.now().isoformat(),
                'version': '1.0'
            }
            
            # Convertir en JSON
            json_data = json.dumps(nfc_data, ensure_ascii=False)
            
            # Cr√©er l'enregistrement NDEF
            record = ndef.TextRecord(json_data, 'fr')
            message = [record]
            
            # √âcrire sur le tag
            tag.ndef.records = message
            
            print(f"‚úÖ Tag NFC √©crit avec succ√®s pour {employee_data['name']}")
            print(f"   Tag ID: {tag_id}")
            print(f"   Employee ID: {employee_data['id']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©criture des donn√©es: {e}")
            return False
    
    def read_employee_data(self):
        """Lire les donn√©es d'un tag NFC"""
        if not self.clf:
            print("‚ùå Lecteur NFC non connect√©")
            return None
            
        print("Placez un tag NFC √† lire...")
        print("Appuyez sur Ctrl+C pour annuler...")
        
        try:
            tag = self.clf.connect(rdwr={'on-connect': lambda tag: self._read_data(tag)})
            return tag
        except KeyboardInterrupt:
            print("\n‚ùå Lecture annul√©e")
            return None
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture: {e}")
            return None
    
    def _read_data(self, tag):
        """Lire les donn√©es du tag"""
        try:
            if tag.ndef:
                for record in tag.ndef.records:
                    if isinstance(record, ndef.TextRecord):
                        data = json.loads(record.text)
                        print(f"‚úÖ Tag lu avec succ√®s:")
                        print(f"   Type: {data.get('type', 'Unknown')}")
                        print(f"   Employ√©: {data.get('name', 'N/A')}")
                        print(f"   Poste: {data.get('position', 'N/A')}")
                        print(f"   Tag ID: {data.get('tagId', 'N/A')}")
                        print(f"   Employee ID: {data.get('employeeId', 'N/A')}")
                        return data
            else:
                print("‚ùå Aucune donn√©e NDEF trouv√©e sur le tag")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture: {e}")
            return None
    
    def disconnect(self):
        """D√©connecter le lecteur NFC"""
        if self.clf:
            self.clf.close()
            print("‚úÖ Lecteur NFC d√©connect√©")

def main():
    """Fonction principale pour g√©rer les tags NFC"""
    writer = NFCEmployeeWriter()
    
    if not writer.connect_reader():
        return
    
    try:
        while True:
            print("\nüè∑Ô∏è  GESTIONNAIRE DE TAGS NFC TIMETRACKER24")
            print("=" * 50)
            print("1. √âcrire un nouveau tag employ√©")
            print("2. Lire un tag existant")
            print("3. Quitter")
            print("=" * 50)
            
            choice = input("Votre choix (1-3): ").strip()
            
            if choice == '1':
                print("\nüìù CR√âATION D'UN NOUVEAU TAG EMPLOY√â")
                print("-" * 40)
                
                # Saisie des donn√©es employ√©
                employee_data = {}
                employee_data['id'] = str(uuid.uuid4())
                employee_data['name'] = input("Nom complet de l'employ√©: ").strip()
                employee_data['position'] = input("Poste/Position: ").strip()
                
                if employee_data['name']:
                    print(f"\n‚ö†Ô∏è  ATTENTION: Vous allez √©crire les donn√©es pour:")
                    print(f"   Nom: {employee_data['name']}")
                    print(f"   Poste: {employee_data['position']}")
                    print(f"   ID: {employee_data['id']}")
                    
                    confirm = input("\nConfirmer l'√©criture ? (oui/non): ").strip().lower()
                    if confirm in ['oui', 'o', 'yes', 'y']:
                        writer.write_employee_data(employee_data)
                    else:
                        print("‚ùå √âcriture annul√©e")
                else:
                    print("‚ùå Le nom de l'employ√© est obligatoire")
            
            elif choice == '2':
                print("\nüìñ LECTURE D'UN TAG EXISTANT")
                print("-" * 30)
                writer.read_employee_data()
            
            elif choice == '3':
                print("üëã Au revoir !")
                break
            
            else:
                print("‚ùå Choix invalide. Veuillez choisir 1, 2 ou 3.")
    
    except KeyboardInterrupt:
        print("\n\nüëã Programme interrompu par l'utilisateur")
    
    finally:
        writer.disconnect()

if __name__ == "__main__":
    print("üöÄ D√©marrage du gestionnaire de tags NFC...")
    print("üìã Pr√©requis: Lecteur NFC connect√© et tags NFC vides disponibles")
    print()
    main()